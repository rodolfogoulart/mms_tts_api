FROM python:3.10-slim AS builder

# Instalar dependências de build + Git
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Definir diretório de trabalho
WORKDIR /build

# Clonar repositório completo
ARG REPO_URL=https://github.com/rodolfogoulart/mms_tts_api.git
ARG BRANCH=auth
RUN git clone --depth 1 --branch ${BRANCH} ${REPO_URL} ./repo

# Criar ambiente virtual
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Instalar dependências Python do repositório clonado
RUN cd ./repo && \
    if [ -f "requirements.txt" ]; then \
        pip install --no-cache-dir --upgrade pip setuptools wheel && \
        pip install --no-cache-dir -r requirements.txt; \
    else \
        pip install --no-cache-dir --upgrade pip && \
        pip install --no-cache-dir \
            transformers==4.35.2 \
            torch==2.2.0 \
            torchaudio==2.2.0 \
            accelerate==0.25.0 \
            fastapi==0.104.1 \
            uvicorn[standard]==0.24.0 \
            python-multipart==0.0.6 \
            pydub==0.25.1 \
            librosa==0.10.1 \
            scipy==1.11.4 \
            numpy==1.24.4 \
            requests==2.31.0 \
            aiofiles==23.2.1 \
            soundfile==0.12.1 \
            PyJWT==2.8.0 \
            python-jose[cryptography]==3.3.0 \
            passlib[bcrypt]==1.7.4; \
    fi && \
    pip cache purge

# ============================================
# Estágio Final
# ============================================
FROM python:3.10-slim

# Instalar runtime essenciais
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copiar ambiente virtual do builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copiar código da aplicação do repositório clonado
COPY --from=builder /build/repo /app

# Criar usuário não-root
RUN useradd --create-home --uid 1000 app && \
    chown -R app:app /app

USER app
WORKDIR /app

# Criar diretórios necessários (incluir data)
RUN mkdir -p temp logs .cache/huggingface data

# Volume para persistir banco de dados
VOLUME ["/app/data"]

# ============================================
# VARIÁVEIS DE AMBIENTE PADRÃO
# (Aparecerão automaticamente no Coolify)
# ============================================

# Configurações básicas da aplicação
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    HF_HOME=/app/.cache/huggingface \
    CUDA_VISIBLE_DEVICES="" \
    OMP_NUM_THREADS=2 \
    PORT=8000

# Configurações de segurança JWT
ENV JWT_SECRET_KEY="hebrew-greek-tts-secret-key-CHANGE-IN-PRODUCTION" \
    TOKEN_EXPIRE_MINUTES=60 \
    ALGORITHM=HS256

# Configurações do banco de dados
ENV DATABASE_PATH="/app/data/tts_auth.db"

# Configurações de inicialização
ENV AUTO_INIT_DEFAULT_DATA=true \
    CREATE_DEFAULT_USERS=true \
    ENVIRONMENT=production

# ============================================
# USUÁRIOS PADRÃO (CUSTOMIZE NO COOLIFY)
# ============================================

# Usuário Administrador
ENV ADMIN_USERNAME="admin" \
    ADMIN_PASSWORD="SecureAdminPass123!" \
    ADMIN_EMAIL="admin@yourdomain.com" \
    ADMIN_RATE_LIMIT=1000

# Usuário Demo
ENV DEMO_USERNAME="demo" \
    DEMO_PASSWORD="DemoPass123!" \
    DEMO_EMAIL="demo@yourdomain.com" \
    DEMO_RATE_LIMIT=100

# ============================================
# CONFIGURAÇÕES DE API KEYS
# ============================================

# API Keys padrão
ENV CREATE_DEMO_API_KEY=true \
    CREATE_ADMIN_API_KEY=false \
    DEMO_API_KEY_NAME="Demo API Key" \
    DEMO_API_KEY_RATE_LIMIT=50 \
    ADMIN_API_KEY_NAME="Admin API Key" \
    ADMIN_API_KEY_RATE_LIMIT=1000

# ============================================
# CONFIGURAÇÕES AVANÇADAS
# ============================================

# Rate limiting
ENV RATE_LIMIT_WINDOW_MINUTES=60

# Logging
ENV LOG_LEVEL=INFO \
    LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Performance
ENV MAX_WORKERS=1 \
    WORKER_TIMEOUT=300

# Health check
HEALTHCHECK --interval=60s --timeout=15s --start-period=120s --retries=6 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

# Labels para documentação no Coolify
LABEL org.opencontainers.image.title="Hebrew & Greek TTS API" \
      org.opencontainers.image.description="Authenticated TTS API for Hebrew, Greek and Portuguese using MMS-TTS" \
      org.opencontainers.image.version="2.1.0" \
      org.opencontainers.image.source="https://github.com/rodolfogoulart/mms_tts_api" \
      org.opencontainers.image.documentation="https://github.com/rodolfogoulart/mms_tts_api/blob/coolify/README.md" \
      coolify.env.description="Hebrew & Greek TTS API with Authentication"

# Comando de inicialização
CMD ["python", "-m", "uvicorn", "app.multi_model_api:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "1", \
     "--log-level", "info"]